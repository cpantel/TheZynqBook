// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.170000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=387,HLS_SYN_LUT=361,HLS_VERSION=2018_2}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_address0;
output   a_ce0;
input  [39:0] a_q0;
output  [2:0] b_address0;
output   b_ce0;
input  [39:0] b_q0;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_111;
reg   [2:0] i_reg_122;
reg   [2:0] j_reg_133;
wire   [0:0] exitcond_flatten_fu_144_p2;
reg   [0:0] exitcond_flatten_reg_390;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_390_pp0_iter6_reg;
wire   [4:0] indvar_flatten_next_fu_150_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_168_p3;
reg   [2:0] j_mid2_reg_399;
reg   [2:0] j_mid2_reg_399_pp0_iter1_reg;
reg   [2:0] j_mid2_reg_399_pp0_iter2_reg;
reg   [2:0] j_mid2_reg_399_pp0_iter3_reg;
reg   [2:0] j_mid2_reg_399_pp0_iter4_reg;
reg   [2:0] j_mid2_reg_399_pp0_iter5_reg;
wire   [2:0] tmp_mid2_v_fu_176_p3;
reg   [2:0] tmp_mid2_v_reg_405;
reg   [2:0] tmp_mid2_v_reg_405_pp0_iter1_reg;
reg   [2:0] tmp_mid2_v_reg_405_pp0_iter2_reg;
reg   [2:0] tmp_mid2_v_reg_405_pp0_iter3_reg;
reg   [2:0] tmp_mid2_v_reg_405_pp0_iter4_reg;
reg   [2:0] tmp_mid2_v_reg_405_pp0_iter5_reg;
wire   [2:0] j_1_fu_184_p2;
reg   [7:0] tmp_8_reg_438;
reg   [7:0] tmp_9_reg_443;
reg  signed [7:0] tmp_10_reg_448;
reg  signed [7:0] tmp_11_reg_453;
reg   [7:0] tmp_12_reg_458;
reg   [7:0] tmp_13_reg_463;
wire   [15:0] tmp_7_1_fu_308_p2;
reg   [15:0] tmp_7_1_reg_478;
wire   [15:0] tmp_7_3_fu_326_p2;
reg   [15:0] tmp_7_3_reg_493;
wire  signed [15:0] grp_fu_369_p3;
reg  signed [15:0] tmp1_reg_498;
reg    ap_enable_reg_pp0_iter4;
reg  signed [15:0] tmp1_reg_498_pp0_iter5_reg;
wire  signed [15:0] grp_fu_376_p3;
reg  signed [15:0] tmp3_reg_503;
wire  signed [15:0] grp_fu_383_p3;
reg  signed [15:0] tmp2_reg_508;
reg    ap_enable_reg_pp0_iter5;
wire   [5:0] tmp_4_fu_355_p2;
reg   [5:0] tmp_4_reg_513;
(* use_dsp48 = "no" *) wire   [15:0] tmp_8_4_fu_361_p2;
reg   [15:0] tmp_8_4_reg_518;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [2:0] ap_phi_mux_i_phi_fu_126_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_mid2_fu_190_p1;
wire   [63:0] tmp_2_fu_194_p1;
wire   [63:0] tmp_16_cast_fu_365_p1;
wire   [0:0] exitcond_fu_162_p2;
wire   [2:0] i_1_fu_156_p2;
wire  signed [7:0] tmp_6_fu_198_p1;
wire  signed [7:0] tmp_16_fu_206_p1;
wire  signed [7:0] tmp_14_fu_274_p4;
wire  signed [7:0] tmp_15_fu_288_p4;
wire  signed [7:0] tmp_7_1_fu_308_p0;
wire  signed [7:0] tmp_7_1_fu_308_p1;
wire  signed [7:0] tmp_7_3_fu_326_p0;
wire  signed [7:0] tmp_7_3_fu_326_p1;
wire   [4:0] tmp_fu_335_p3;
wire   [5:0] p_shl_cast_fu_342_p1;
wire   [5:0] tmp_mid2_cast_fu_332_p1;
wire   [5:0] tmp_2_cast_fu_352_p1;
wire   [5:0] tmp_1_fu_346_p2;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

matrix_mult_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_fu_198_p1),
    .din1(tmp_16_fu_206_p1),
    .din2(tmp_7_1_reg_478),
    .ce(1'b1),
    .dout(grp_fu_369_p3)
);

matrix_mult_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_14_fu_274_p4),
    .din1(tmp_15_fu_288_p4),
    .din2(tmp_7_3_reg_493),
    .ce(1'b1),
    .dout(grp_fu_376_p3)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_reg_448),
    .din1(tmp_11_reg_453),
    .din2(tmp3_reg_503),
    .ce(1'b1),
    .dout(grp_fu_383_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_390 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_122 <= tmp_mid2_v_reg_405;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_122 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_111 <= indvar_flatten_next_fu_150_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_111 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_133 <= j_1_fu_184_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_133 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_390 <= exitcond_flatten_fu_144_p2;
        exitcond_flatten_reg_390_pp0_iter1_reg <= exitcond_flatten_reg_390;
        j_mid2_reg_399_pp0_iter1_reg <= j_mid2_reg_399;
        tmp_mid2_v_reg_405_pp0_iter1_reg <= tmp_mid2_v_reg_405;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_390_pp0_iter2_reg <= exitcond_flatten_reg_390_pp0_iter1_reg;
        exitcond_flatten_reg_390_pp0_iter3_reg <= exitcond_flatten_reg_390_pp0_iter2_reg;
        exitcond_flatten_reg_390_pp0_iter4_reg <= exitcond_flatten_reg_390_pp0_iter3_reg;
        exitcond_flatten_reg_390_pp0_iter5_reg <= exitcond_flatten_reg_390_pp0_iter4_reg;
        exitcond_flatten_reg_390_pp0_iter6_reg <= exitcond_flatten_reg_390_pp0_iter5_reg;
        j_mid2_reg_399_pp0_iter2_reg <= j_mid2_reg_399_pp0_iter1_reg;
        j_mid2_reg_399_pp0_iter3_reg <= j_mid2_reg_399_pp0_iter2_reg;
        j_mid2_reg_399_pp0_iter4_reg <= j_mid2_reg_399_pp0_iter3_reg;
        j_mid2_reg_399_pp0_iter5_reg <= j_mid2_reg_399_pp0_iter4_reg;
        tmp1_reg_498_pp0_iter5_reg <= tmp1_reg_498;
        tmp_mid2_v_reg_405_pp0_iter2_reg <= tmp_mid2_v_reg_405_pp0_iter1_reg;
        tmp_mid2_v_reg_405_pp0_iter3_reg <= tmp_mid2_v_reg_405_pp0_iter2_reg;
        tmp_mid2_v_reg_405_pp0_iter4_reg <= tmp_mid2_v_reg_405_pp0_iter3_reg;
        tmp_mid2_v_reg_405_pp0_iter5_reg <= tmp_mid2_v_reg_405_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_399 <= j_mid2_fu_168_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_390_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tmp1_reg_498 <= grp_fu_369_p3;
        tmp3_reg_503 <= grp_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_390_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        tmp2_reg_508 <= grp_fu_383_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_390_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_448 <= {{a_q0[23:16]}};
        tmp_11_reg_453 <= {{b_q0[23:16]}};
        tmp_12_reg_458 <= {{a_q0[31:24]}};
        tmp_13_reg_463 <= {{b_q0[31:24]}};
        tmp_8_reg_438 <= {{a_q0[15:8]}};
        tmp_9_reg_443 <= {{b_q0[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_390_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_513 <= tmp_4_fu_355_p2;
        tmp_8_4_reg_518 <= tmp_8_4_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_390_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_7_1_reg_478 <= tmp_7_1_fu_308_p2;
        tmp_7_3_reg_493 <= tmp_7_3_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mid2_v_reg_405 <= tmp_mid2_v_fu_176_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_390 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_126_p4 = tmp_mid2_v_reg_405;
    end else begin
        ap_phi_mux_i_phi_fu_126_p4 = i_reg_122;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_390_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_mid2_fu_190_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = tmp_2_fu_194_p1;

assign exitcond_flatten_fu_144_p2 = ((indvar_flatten_reg_111 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_fu_162_p2 = ((j_reg_133 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_156_p2 = (3'd1 + ap_phi_mux_i_phi_fu_126_p4);

assign indvar_flatten_next_fu_150_p2 = (indvar_flatten_reg_111 + 5'd1);

assign j_1_fu_184_p2 = (3'd1 + j_mid2_fu_168_p3);

assign j_mid2_fu_168_p3 = ((exitcond_fu_162_p2[0:0] === 1'b1) ? 3'd0 : j_reg_133);

assign p_shl_cast_fu_342_p1 = tmp_fu_335_p3;

assign prod_address0 = tmp_16_cast_fu_365_p1;

assign prod_d0 = tmp_8_4_reg_518;

assign tmp_14_fu_274_p4 = {{a_q0[39:32]}};

assign tmp_15_fu_288_p4 = {{b_q0[39:32]}};

assign tmp_16_cast_fu_365_p1 = tmp_4_reg_513;

assign tmp_16_fu_206_p1 = b_q0[7:0];

assign tmp_1_fu_346_p2 = (p_shl_cast_fu_342_p1 + tmp_mid2_cast_fu_332_p1);

assign tmp_2_cast_fu_352_p1 = j_mid2_reg_399_pp0_iter5_reg;

assign tmp_2_fu_194_p1 = j_mid2_reg_399;

assign tmp_4_fu_355_p2 = (tmp_2_cast_fu_352_p1 + tmp_1_fu_346_p2);

assign tmp_6_fu_198_p1 = a_q0[7:0];

assign tmp_7_1_fu_308_p0 = tmp_8_reg_438;

assign tmp_7_1_fu_308_p1 = tmp_9_reg_443;

assign tmp_7_1_fu_308_p2 = ($signed(tmp_7_1_fu_308_p0) * $signed(tmp_7_1_fu_308_p1));

assign tmp_7_3_fu_326_p0 = tmp_12_reg_458;

assign tmp_7_3_fu_326_p1 = tmp_13_reg_463;

assign tmp_7_3_fu_326_p2 = ($signed(tmp_7_3_fu_326_p0) * $signed(tmp_7_3_fu_326_p1));

assign tmp_8_4_fu_361_p2 = ($signed(tmp2_reg_508) + $signed(tmp1_reg_498_pp0_iter5_reg));

assign tmp_fu_335_p3 = {{tmp_mid2_v_reg_405_pp0_iter5_reg}, {2'd0}};

assign tmp_mid2_cast_fu_332_p1 = tmp_mid2_v_reg_405_pp0_iter5_reg;

assign tmp_mid2_fu_190_p1 = tmp_mid2_v_reg_405;

assign tmp_mid2_v_fu_176_p3 = ((exitcond_fu_162_p2[0:0] === 1'b1) ? i_1_fu_156_p2 : ap_phi_mux_i_phi_fu_126_p4);

endmodule //matrix_mult
