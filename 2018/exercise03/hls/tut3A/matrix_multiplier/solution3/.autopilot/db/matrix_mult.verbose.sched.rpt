

================================================================
== Vivado HLS Report for 'matrix_mult'
================================================================
* Date:           Wed Dec 25 16:44:09 2019

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        matrix_multiplier
* Solution:       solution3
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|     4.170|        0.62|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   33|   33|   33|   33|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |           |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Row_Col  |   31|   31|         8|          1|          1|    25|    yes   |
        +-----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 8


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 1
  Pipeline-0 : II = 1, D = 8, States = { 2 3 4 5 6 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	10  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	2  / true
10 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([5 x i40]* %b), !map !7"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([5 x i40]* %a), !map !34"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([25 x i16]* %prod), !map !55"   --->   Operation 13 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @matrix_mult_str) nounwind"   --->   Operation 14 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (1.76ns)   --->   "br label %1" [matrix_mult.cpp:10]   --->   Operation 15 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 3.76>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i5 [ 0, %0 ], [ %indvar_flatten_next, %.reset ]"   --->   Operation 16 'phi' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%i = phi i3 [ 0, %0 ], [ %tmp_mid2_v, %.reset ]" [matrix_mult.cpp:13]   --->   Operation 17 'phi' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "%j = phi i3 [ 0, %0 ], [ %j_1, %.reset ]"   --->   Operation 18 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (1.36ns)   --->   "%exitcond_flatten = icmp eq i5 %indvar_flatten, -7"   --->   Operation 19 'icmp' 'exitcond_flatten' <Predicate = true> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25)"   --->   Operation 20 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (1.78ns)   --->   "%indvar_flatten_next = add i5 %indvar_flatten, 1"   --->   Operation 21 'add' 'indvar_flatten_next' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "br i1 %exitcond_flatten, label %2, label %.reset"   --->   Operation 22 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (1.65ns)   --->   "%i_1 = add i3 1, %i" [matrix_mult.cpp:10]   --->   Operation 23 'add' 'i_1' <Predicate = (!exitcond_flatten)> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (1.13ns)   --->   "%exitcond = icmp eq i3 %j, -3" [matrix_mult.cpp:12]   --->   Operation 24 'icmp' 'exitcond' <Predicate = (!exitcond_flatten)> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (0.98ns)   --->   "%j_mid2 = select i1 %exitcond, i3 0, i3 %j" [matrix_mult.cpp:12]   --->   Operation 25 'select' 'j_mid2' <Predicate = (!exitcond_flatten)> <Delay = 0.98> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.98ns)   --->   "%tmp_mid2_v = select i1 %exitcond, i3 %i_1, i3 %i" [matrix_mult.cpp:13]   --->   Operation 26 'select' 'tmp_mid2_v' <Predicate = (!exitcond_flatten)> <Delay = 0.98> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (1.65ns)   --->   "%j_1 = add i3 1, %j_mid2" [matrix_mult.cpp:12]   --->   Operation 27 'add' 'j_1' <Predicate = (!exitcond_flatten)> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 2.32>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%tmp_mid2 = zext i3 %tmp_mid2_v to i64" [matrix_mult.cpp:13]   --->   Operation 28 'zext' 'tmp_mid2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_2 = zext i3 %j_mid2 to i64" [matrix_mult.cpp:13]   --->   Operation 29 'zext' 'tmp_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%a_addr = getelementptr [5 x i40]* %a, i64 0, i64 %tmp_mid2" [matrix_mult.cpp:16]   --->   Operation 30 'getelementptr' 'a_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 31 [2/2] (2.32ns)   --->   "%a_load = load i40* %a_addr, align 8" [matrix_mult.cpp:16]   --->   Operation 31 'load' 'a_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%b_addr = getelementptr [5 x i40]* %b, i64 0, i64 %tmp_2" [matrix_mult.cpp:16]   --->   Operation 32 'getelementptr' 'b_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 33 [2/2] (2.32ns)   --->   "%b_load = load i40* %b_addr, align 8" [matrix_mult.cpp:16]   --->   Operation 33 'load' 'b_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>

State 4 <SV = 3> <Delay = 3.37>
ST_4 : Operation 34 [1/2] (2.32ns)   --->   "%a_load = load i40* %a_addr, align 8" [matrix_mult.cpp:16]   --->   Operation 34 'load' 'a_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 35 [1/1] (0.00ns)   --->   "%tmp_6 = trunc i40 %a_load to i8" [matrix_mult.cpp:16]   --->   Operation 35 'trunc' 'tmp_6' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 36 [1/1] (0.00ns)   --->   "%tmp_5 = sext i8 %tmp_6 to i16" [matrix_mult.cpp:16]   --->   Operation 36 'sext' 'tmp_5' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 37 [1/2] (2.32ns)   --->   "%b_load = load i40* %b_addr, align 8" [matrix_mult.cpp:16]   --->   Operation 37 'load' 'b_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 38 [1/1] (0.00ns)   --->   "%tmp_16 = trunc i40 %b_load to i8" [matrix_mult.cpp:16]   --->   Operation 38 'trunc' 'tmp_16' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "%tmp_s = sext i8 %tmp_16 to i16" [matrix_mult.cpp:16]   --->   Operation 39 'sext' 'tmp_s' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 40 [3/3] (1.05ns)   --->   "%tmp_7 = mul i16 %tmp_5, %tmp_s" [matrix_mult.cpp:16]   --->   Operation 40 'mul' 'tmp_7' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 41 [1/1] (0.00ns)   --->   "%tmp_8 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %a_load, i32 8, i32 15)" [matrix_mult.cpp:16]   --->   Operation 41 'partselect' 'tmp_8' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 42 [1/1] (0.00ns)   --->   "%tmp_9 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %b_load, i32 8, i32 15)" [matrix_mult.cpp:16]   --->   Operation 42 'partselect' 'tmp_9' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 43 [1/1] (0.00ns)   --->   "%tmp_10 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %a_load, i32 16, i32 23)" [matrix_mult.cpp:16]   --->   Operation 43 'partselect' 'tmp_10' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_11 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %b_load, i32 16, i32 23)" [matrix_mult.cpp:16]   --->   Operation 44 'partselect' 'tmp_11' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%tmp_12 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %a_load, i32 24, i32 31)" [matrix_mult.cpp:16]   --->   Operation 45 'partselect' 'tmp_12' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_13 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %b_load, i32 24, i32 31)" [matrix_mult.cpp:16]   --->   Operation 46 'partselect' 'tmp_13' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%tmp_14 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %a_load, i32 32, i32 39)" [matrix_mult.cpp:16]   --->   Operation 47 'partselect' 'tmp_14' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "%tmp_5_4 = sext i8 %tmp_14 to i16" [matrix_mult.cpp:16]   --->   Operation 48 'sext' 'tmp_5_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_15 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %b_load, i32 32, i32 39)" [matrix_mult.cpp:16]   --->   Operation 49 'partselect' 'tmp_15' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 50 [1/1] (0.00ns)   --->   "%tmp_6_4 = sext i8 %tmp_15 to i16" [matrix_mult.cpp:16]   --->   Operation 50 'sext' 'tmp_6_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 51 [3/3] (1.05ns)   --->   "%tmp_7_4 = mul i16 %tmp_5_4, %tmp_6_4" [matrix_mult.cpp:16]   --->   Operation 51 'mul' 'tmp_7_4' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 5 <SV = 4> <Delay = 4.17>
ST_5 : Operation 52 [2/3] (1.05ns)   --->   "%tmp_7 = mul i16 %tmp_5, %tmp_s" [matrix_mult.cpp:16]   --->   Operation 52 'mul' 'tmp_7' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 53 [1/1] (0.00ns)   --->   "%tmp_5_1 = sext i8 %tmp_8 to i16" [matrix_mult.cpp:16]   --->   Operation 53 'sext' 'tmp_5_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 54 [1/1] (0.00ns)   --->   "%tmp_6_1 = sext i8 %tmp_9 to i16" [matrix_mult.cpp:16]   --->   Operation 54 'sext' 'tmp_6_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 55 [1/1] (4.17ns)   --->   "%tmp_7_1 = mul i16 %tmp_5_1, %tmp_6_1" [matrix_mult.cpp:16]   --->   Operation 55 'mul' 'tmp_7_1' <Predicate = (!exitcond_flatten)> <Delay = 4.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 4.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 56 [1/1] (0.00ns)   --->   "%tmp_5_2 = sext i8 %tmp_10 to i16" [matrix_mult.cpp:16]   --->   Operation 56 'sext' 'tmp_5_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 57 [1/1] (0.00ns)   --->   "%tmp_6_2 = sext i8 %tmp_11 to i16" [matrix_mult.cpp:16]   --->   Operation 57 'sext' 'tmp_6_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 58 [3/3] (1.05ns)   --->   "%tmp_7_2 = mul i16 %tmp_5_2, %tmp_6_2" [matrix_mult.cpp:16]   --->   Operation 58 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 59 [1/1] (0.00ns)   --->   "%tmp_5_3 = sext i8 %tmp_12 to i16" [matrix_mult.cpp:16]   --->   Operation 59 'sext' 'tmp_5_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_6_3 = sext i8 %tmp_13 to i16" [matrix_mult.cpp:16]   --->   Operation 60 'sext' 'tmp_6_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (4.17ns)   --->   "%tmp_7_3 = mul i16 %tmp_5_3, %tmp_6_3" [matrix_mult.cpp:16]   --->   Operation 61 'mul' 'tmp_7_3' <Predicate = (!exitcond_flatten)> <Delay = 4.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 4.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 62 [2/3] (1.05ns)   --->   "%tmp_7_4 = mul i16 %tmp_5_4, %tmp_6_4" [matrix_mult.cpp:16]   --->   Operation 62 'mul' 'tmp_7_4' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 6 <SV = 5> <Delay = 3.02>
ST_6 : Operation 63 [1/3] (0.00ns)   --->   "%tmp_7 = mul i16 %tmp_5, %tmp_s" [matrix_mult.cpp:16]   --->   Operation 63 'mul' 'tmp_7' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 64 [2/3] (1.05ns)   --->   "%tmp_7_2 = mul i16 %tmp_5_2, %tmp_6_2" [matrix_mult.cpp:16]   --->   Operation 64 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 65 [1/3] (0.00ns)   --->   "%tmp_7_4 = mul i16 %tmp_5_4, %tmp_6_4" [matrix_mult.cpp:16]   --->   Operation 65 'mul' 'tmp_7_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 66 [1/1] (3.02ns)   --->   "%tmp1 = add i16 %tmp_7_1, %tmp_7" [matrix_mult.cpp:16]   --->   Operation 66 'add' 'tmp1' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 67 [1/1] (3.02ns)   --->   "%tmp3 = add i16 %tmp_7_3, %tmp_7_4" [matrix_mult.cpp:16]   --->   Operation 67 'add' 'tmp3' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 7 <SV = 6> <Delay = 3.02>
ST_7 : Operation 68 [1/3] (0.00ns)   --->   "%tmp_7_2 = mul i16 %tmp_5_2, %tmp_6_2" [matrix_mult.cpp:16]   --->   Operation 68 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 69 [1/1] (3.02ns)   --->   "%tmp2 = add i16 %tmp3, %tmp_7_2" [matrix_mult.cpp:16]   --->   Operation 69 'add' 'tmp2' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 8 <SV = 7> <Delay = 3.49>
ST_8 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_mid2_cast = zext i3 %tmp_mid2_v to i6" [matrix_mult.cpp:13]   --->   Operation 70 'zext' 'tmp_mid2_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_8 : Operation 71 [1/1] (0.00ns)   --->   "%tmp = call i5 @_ssdm_op_BitConcatenate.i5.i3.i2(i3 %tmp_mid2_v, i2 0)" [matrix_mult.cpp:13]   --->   Operation 71 'bitconcatenate' 'tmp' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_8 : Operation 72 [1/1] (0.00ns)   --->   "%p_shl_cast = zext i5 %tmp to i6" [matrix_mult.cpp:13]   --->   Operation 72 'zext' 'p_shl_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_8 : Operation 73 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp_1 = add i6 %p_shl_cast, %tmp_mid2_cast" [matrix_mult.cpp:13]   --->   Operation 73 'add' 'tmp_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.74> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_2_cast = zext i3 %j_mid2 to i6" [matrix_mult.cpp:13]   --->   Operation 74 'zext' 'tmp_2_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_8 : Operation 75 [1/1] (3.49ns) (root node of TernaryAdder)   --->   "%tmp_4 = add i6 %tmp_2_cast, %tmp_1" [matrix_mult.cpp:13]   --->   Operation 75 'add' 'tmp_4' <Predicate = (!exitcond_flatten)> <Delay = 3.49> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.74> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 76 [1/1] (2.07ns)   --->   "%tmp_8_4 = add i16 %tmp2, %tmp1" [matrix_mult.cpp:16]   --->   Operation 76 'add' 'tmp_8_4' <Predicate = (!exitcond_flatten)> <Delay = 2.07> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 9 <SV = 8> <Delay = 2.32>
ST_9 : Operation 77 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @Row_Col_str)"   --->   Operation 77 'specloopname' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str3) nounwind" [matrix_mult.cpp:12]   --->   Operation 78 'specloopname' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str3) nounwind" [matrix_mult.cpp:12]   --->   Operation 79 'specregionbegin' 'tmp_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 80 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [matrix_mult.cpp:13]   --->   Operation 80 'specpipeline' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 81 [1/1] (0.00ns)   --->   "%tmp_16_cast = zext i6 %tmp_4 to i64" [matrix_mult.cpp:13]   --->   Operation 81 'zext' 'tmp_16_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 82 [1/1] (0.00ns)   --->   "%prod_addr = getelementptr [25 x i16]* %prod, i64 0, i64 %tmp_16_cast" [matrix_mult.cpp:13]   --->   Operation 82 'getelementptr' 'prod_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 83 [1/1] (2.32ns)   --->   "store i16 %tmp_8_4, i16* %prod_addr, align 2" [matrix_mult.cpp:16]   --->   Operation 83 'store' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_9 : Operation 84 [1/1] (0.00ns)   --->   "%empty_4 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str3, i32 %tmp_3) nounwind" [matrix_mult.cpp:18]   --->   Operation 84 'specregionend' 'empty_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_9 : Operation 85 [1/1] (0.00ns)   --->   "br label %1"   --->   Operation 85 'br' <Predicate = (!exitcond_flatten)> <Delay = 0.00>

State 10 <SV = 2> <Delay = 0.00>
ST_10 : Operation 86 [1/1] (0.00ns)   --->   "ret void" [matrix_mult.cpp:21]   --->   Operation 86 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5ns, clock uncertainty: 0.625ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [10]  (1.77 ns)

 <State 2>: 3.76ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matrix_mult.cpp:12) [12]  (0 ns)
	'icmp' operation ('exitcond', matrix_mult.cpp:12) [20]  (1.13 ns)
	'select' operation ('j_mid2', matrix_mult.cpp:12) [21]  (0.98 ns)
	'add' operation ('j', matrix_mult.cpp:12) [71]  (1.65 ns)

 <State 3>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('a_addr', matrix_mult.cpp:16) [36]  (0 ns)
	'load' operation ('a_load', matrix_mult.cpp:16) on array 'a' [37]  (2.32 ns)

 <State 4>: 3.37ns
The critical path consists of the following:
	'load' operation ('a_load', matrix_mult.cpp:16) on array 'a' [37]  (2.32 ns)
	'mul' operation ('tmp_7', matrix_mult.cpp:16) [44]  (1.05 ns)

 <State 5>: 4.17ns
The critical path consists of the following:
	'mul' operation ('tmp_7_1', matrix_mult.cpp:16) [49]  (4.17 ns)

 <State 6>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_7', matrix_mult.cpp:16) [44]  (0 ns)
	'add' operation ('tmp1', matrix_mult.cpp:16) [65]  (3.02 ns)

 <State 7>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_7_2', matrix_mult.cpp:16) [54]  (0 ns)
	'add' operation ('tmp2', matrix_mult.cpp:16) [67]  (3.02 ns)

 <State 8>: 3.49ns
The critical path consists of the following:
	'add' operation ('tmp_1', matrix_mult.cpp:13) [27]  (0 ns)
	'add' operation ('tmp_4', matrix_mult.cpp:13) [33]  (3.49 ns)

 <State 9>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('prod_addr', matrix_mult.cpp:13) [35]  (0 ns)
	'store' operation (matrix_mult.cpp:16) of variable 'tmp_8_4', matrix_mult.cpp:16 on array 'prod' [69]  (2.32 ns)

 <State 10>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
