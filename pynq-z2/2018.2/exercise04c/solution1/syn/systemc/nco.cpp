// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "nco.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nco::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nco::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> nco::ap_ST_fsm_state1 = "1";
const sc_lv<2> nco::ap_ST_fsm_state2 = "10";
const int nco::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> nco::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> nco::ap_const_lv32_1 = "1";
const sc_lv<32> nco::ap_const_lv32_4 = "100";
const sc_lv<32> nco::ap_const_lv32_F = "1111";
const bool nco::ap_const_boolean_1 = true;

nco::nco(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sine_lut_V_U = new nco_sine_lut_V("sine_lut_V_U");
    sine_lut_V_U->clk(ap_clk);
    sine_lut_V_U->reset(ap_rst_n_inv);
    sine_lut_V_U->address0(sine_lut_V_address0);
    sine_lut_V_U->ce0(sine_lut_V_ce0);
    sine_lut_V_U->q0(sine_lut_V_q0);
    nco_AXILiteS_s_axi_U = new nco_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("nco_AXILiteS_s_axi_U");
    nco_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    nco_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    nco_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    nco_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    nco_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    nco_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    nco_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    nco_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    nco_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    nco_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    nco_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    nco_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    nco_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    nco_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    nco_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    nco_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    nco_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    nco_AXILiteS_s_axi_U->ACLK(ap_clk);
    nco_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    nco_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    nco_AXILiteS_s_axi_U->sine_sample_V(sine_lut_V_q0);
    nco_AXILiteS_s_axi_U->sine_sample_V_ap_vld(sine_sample_V_ap_vld);
    nco_AXILiteS_s_axi_U->step_size_V(step_size_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_address_V_fu_79_p4);
    sensitive << ( p_Val2_1_fu_67_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_p_Val2_1_fu_67_p2);
    sensitive << ( step_size_V );
    sensitive << ( temp_V );

    SC_METHOD(thread_sine_lut_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_6_fu_89_p1 );

    SC_METHOD(thread_sine_lut_V_ce0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sine_sample_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_6_fu_89_p1);
    sensitive << ( address_V_fu_79_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    temp_V = "0000000000000000";
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nco_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, sine_sample_V_ap_vld, "sine_sample_V_ap_vld");
    sc_trace(mVcdFile, step_size_V, "step_size_V");
    sc_trace(mVcdFile, temp_V, "temp_V");
    sc_trace(mVcdFile, sine_lut_V_address0, "sine_lut_V_address0");
    sc_trace(mVcdFile, sine_lut_V_ce0, "sine_lut_V_ce0");
    sc_trace(mVcdFile, sine_lut_V_q0, "sine_lut_V_q0");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_6_fu_89_p1, "tmp_6_fu_89_p1");
    sc_trace(mVcdFile, p_Val2_1_fu_67_p2, "p_Val2_1_fu_67_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, address_V_fu_79_p4, "address_V_fu_79_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("nco.hdltvin.dat");
    mHdltvoutHandle.open("nco.hdltvout.dat");
}

nco::~nco() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sine_lut_V_U;
    delete nco_AXILiteS_s_axi_U;
}

void nco::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void nco::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        temp_V = p_Val2_1_fu_67_p2.read();
    }
}

void nco::thread_address_V_fu_79_p4() {
    address_V_fu_79_p4 = p_Val2_1_fu_67_p2.read().range(15, 4);
}

void nco::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void nco::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void nco::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void nco::thread_p_Val2_1_fu_67_p2() {
    p_Val2_1_fu_67_p2 = (!temp_V.read().is_01() || !step_size_V.read().is_01())? sc_lv<16>(): (sc_biguint<16>(temp_V.read()) + sc_biguint<16>(step_size_V.read()));
}

void nco::thread_sine_lut_V_address0() {
    sine_lut_V_address0 =  (sc_lv<12>) (tmp_6_fu_89_p1.read());
}

void nco::thread_sine_lut_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sine_lut_V_ce0 = ap_const_logic_1;
    } else {
        sine_lut_V_ce0 = ap_const_logic_0;
    }
}

void nco::thread_sine_sample_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sine_sample_V_ap_vld = ap_const_logic_1;
    } else {
        sine_sample_V_ap_vld = ap_const_logic_0;
    }
}

void nco::thread_tmp_6_fu_89_p1() {
    tmp_6_fu_89_p1 = esl_zext<64,12>(address_V_fu_79_p4.read());
}

void nco::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void nco::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

